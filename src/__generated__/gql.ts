/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query GetPhase($phaseId: ID){\n        phase(id: $phaseId){\n            id\n            bracketType\n            groupCount\n            name\n            numSeeds\n            phaseGroups {\n                nodes {\n                    id\n                    bracketUrl\n                    displayIdentifier\n                    numRounds\n                    seedMap\n                    seeds(query: {perPage: 8}){\n                        nodes {\n                            entrant {\n                                initialSeedNum\n                                name\n                                participants {\n                                    images {\n                                        type\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    state\n                }\n            }\n            state\n            \n        }\n    }\n": types.GetPhaseDocument,
    "\n    query GetPhaseGroup($phaseGroupId: ID){\n        phaseGroup(id: $phaseGroupId){\n            id\n            bracketType\n            bracketUrl\n            displayIdentifier\n            numRounds\n            seedMap\n            seeds(query: {perPage: 100}){\n                nodes {\n                    entrant {\n                        initialSeedNum\n                        name\n                        \n                    }\n                }\n            }\n            state\n        }\n    }\n": types.GetPhaseGroupDocument,
    "\n    query GetTournament($tournamentId: ID) {\n        tournament(id: $tournamentId) {\n            id\n            addrState\n            city\n            countryCode\n            endAt\n            events {\n                id\n                images {\n                    type\n                    url\n                }\n                name\n                numEntrants\n                phases {\n                    id\n                    bracketType\n                    groupCount\n                    name\n                    numSeeds\n                }\n                startAt\n                state\n                videogame {\n                    images {\n                        type\n                        url\n                    }\n                    name\n                }\n            }\n            images {\n                type\n                url\n            }\n            isOnline\n            name\n            numAttendees\n            slug\n            startAt\n        }\n    }  \n": types.GetTournamentDocument,
    "\n    query GetFeaturedTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: false, staffPicks: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n": types.GetFeaturedTournamentsDocument,
    "\n    query GetLocalTournaments($coordinates: String, $page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {upcoming: true, location: {distanceFrom: $coordinates, distance: \"50mi\"}}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n": types.GetLocalTournamentsDocument,
    "\n    query GetOnlineTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {hasOnlineEvents: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n": types.GetOnlineTournamentsDocument,
    "\n    query GetUpcomingTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n": types.GetUpcomingTournamentsDocument,
    "\n    query GetFeaturedTournamentsPageInfo($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: false, staffPicks: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n": types.GetFeaturedTournamentsPageInfoDocument,
    "\n    query GetLocalTournamentsPageInfo($coordinates: String, $page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {upcoming: true, location: {distanceFrom: $coordinates, distance: \"50mi\"}}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n": types.GetLocalTournamentsPageInfoDocument,
    "\n    query GetOnlineTournamentsPageInfo($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {hasOnlineEvents: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n": types.GetOnlineTournamentsPageInfoDocument,
    "\nquery GetUpcomingTournamentsPageInfo($page: Int, $perPage: Int) {\n    tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: true, upcoming: true}}) {\n        pageInfo {\n            total\n            totalPages\n            page\n            perPage\n        }\n    }\n}\n": types.GetUpcomingTournamentsPageInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetPhase($phaseId: ID){\n        phase(id: $phaseId){\n            id\n            bracketType\n            groupCount\n            name\n            numSeeds\n            phaseGroups {\n                nodes {\n                    id\n                    bracketUrl\n                    displayIdentifier\n                    numRounds\n                    seedMap\n                    seeds(query: {perPage: 8}){\n                        nodes {\n                            entrant {\n                                initialSeedNum\n                                name\n                                participants {\n                                    images {\n                                        type\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    state\n                }\n            }\n            state\n            \n        }\n    }\n"): (typeof documents)["\n    query GetPhase($phaseId: ID){\n        phase(id: $phaseId){\n            id\n            bracketType\n            groupCount\n            name\n            numSeeds\n            phaseGroups {\n                nodes {\n                    id\n                    bracketUrl\n                    displayIdentifier\n                    numRounds\n                    seedMap\n                    seeds(query: {perPage: 8}){\n                        nodes {\n                            entrant {\n                                initialSeedNum\n                                name\n                                participants {\n                                    images {\n                                        type\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    state\n                }\n            }\n            state\n            \n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetPhaseGroup($phaseGroupId: ID){\n        phaseGroup(id: $phaseGroupId){\n            id\n            bracketType\n            bracketUrl\n            displayIdentifier\n            numRounds\n            seedMap\n            seeds(query: {perPage: 100}){\n                nodes {\n                    entrant {\n                        initialSeedNum\n                        name\n                        \n                    }\n                }\n            }\n            state\n        }\n    }\n"): (typeof documents)["\n    query GetPhaseGroup($phaseGroupId: ID){\n        phaseGroup(id: $phaseGroupId){\n            id\n            bracketType\n            bracketUrl\n            displayIdentifier\n            numRounds\n            seedMap\n            seeds(query: {perPage: 100}){\n                nodes {\n                    entrant {\n                        initialSeedNum\n                        name\n                        \n                    }\n                }\n            }\n            state\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetTournament($tournamentId: ID) {\n        tournament(id: $tournamentId) {\n            id\n            addrState\n            city\n            countryCode\n            endAt\n            events {\n                id\n                images {\n                    type\n                    url\n                }\n                name\n                numEntrants\n                phases {\n                    id\n                    bracketType\n                    groupCount\n                    name\n                    numSeeds\n                }\n                startAt\n                state\n                videogame {\n                    images {\n                        type\n                        url\n                    }\n                    name\n                }\n            }\n            images {\n                type\n                url\n            }\n            isOnline\n            name\n            numAttendees\n            slug\n            startAt\n        }\n    }  \n"): (typeof documents)["\n    query GetTournament($tournamentId: ID) {\n        tournament(id: $tournamentId) {\n            id\n            addrState\n            city\n            countryCode\n            endAt\n            events {\n                id\n                images {\n                    type\n                    url\n                }\n                name\n                numEntrants\n                phases {\n                    id\n                    bracketType\n                    groupCount\n                    name\n                    numSeeds\n                }\n                startAt\n                state\n                videogame {\n                    images {\n                        type\n                        url\n                    }\n                    name\n                }\n            }\n            images {\n                type\n                url\n            }\n            isOnline\n            name\n            numAttendees\n            slug\n            startAt\n        }\n    }  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFeaturedTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: false, staffPicks: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetFeaturedTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: false, staffPicks: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetLocalTournaments($coordinates: String, $page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {upcoming: true, location: {distanceFrom: $coordinates, distance: \"50mi\"}}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetLocalTournaments($coordinates: String, $page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {upcoming: true, location: {distanceFrom: $coordinates, distance: \"50mi\"}}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOnlineTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {hasOnlineEvents: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetOnlineTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {hasOnlineEvents: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUpcomingTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUpcomingTournaments($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            } nodes {\n                id\n                addrState\n                city\n                countryCode\n                endAt\n                images {\n                type\n                url\n                }\n                isOnline\n                name\n                numAttendees\n                slug\n                startAt\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFeaturedTournamentsPageInfo($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: false, staffPicks: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetFeaturedTournamentsPageInfo($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: false, staffPicks: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetLocalTournamentsPageInfo($coordinates: String, $page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {upcoming: true, location: {distanceFrom: $coordinates, distance: \"50mi\"}}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetLocalTournamentsPageInfo($coordinates: String, $page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {upcoming: true, location: {distanceFrom: $coordinates, distance: \"50mi\"}}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOnlineTournamentsPageInfo($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {hasOnlineEvents: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetOnlineTournamentsPageInfo($page: Int, $perPage: Int) {\n        tournaments(query: { perPage: $perPage, page: $page, filter: {hasOnlineEvents: true, upcoming: true}}) {\n            pageInfo {\n                total\n                totalPages\n                page\n                perPage\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetUpcomingTournamentsPageInfo($page: Int, $perPage: Int) {\n    tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: true, upcoming: true}}) {\n        pageInfo {\n            total\n            totalPages\n            page\n            perPage\n        }\n    }\n}\n"): (typeof documents)["\nquery GetUpcomingTournamentsPageInfo($page: Int, $perPage: Int) {\n    tournaments(query: { perPage: $perPage, page: $page, filter: {isFeatured: true, upcoming: true}}) {\n        pageInfo {\n            total\n            totalPages\n            page\n            perPage\n        }\n    }\n}\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;